---
globs: *.ts,*.tsx
description: TypeScript 开发规范和类型定义
---

# TypeScript 开发规范

## 类型定义规范
- **严格使用 TypeScript**，避免使用 `any` 类型
- 为 API 响应数据定义接口类型
- 使用 `interface` 定义对象类型，`type` 定义联合类型
- 导入类型时使用 `import type` 语法

## API 接口类型定义
在 [src/api/types/](mdc:src/api/types/) 目录下定义接口类型：
```typescript
// 定义响应数据接口
export interface IApiResponse<T = any> {
  code: number
  data: T
  msg: string
}

// 定义具体业务类型
export interface IUserInfo {
  id: number
  username: string
  avatar?: string
}
```

## Hook 类型定义
在 [src/hooks/](mdc:src/hooks/) 中使用泛型约束：
```typescript
export function useRequest<T = any>(api: () => Promise<T>) {
  // 实现逻辑
}
```

## Store 类型定义
在 [src/store/](mdc:src/store/) 中使用 Pinia 类型推导：
```typescript
export const useUserStore = defineStore('user', () => {
  const userInfo = ref<IUserInfo | null>(null)

  const setUserInfo = (info: IUserInfo) => {
    userInfo.value = info
  }

  return {
    userInfo: readonly(userInfo),
    setUserInfo
  }
})
```

## 平台类型声明
在 [src/typings.d.ts](mdc:src/typings.d.ts) 中扩展全局类型声明。