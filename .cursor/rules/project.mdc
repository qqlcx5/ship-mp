---
alwaysApply: true
---

# UniApp + Vue3 + TypeScript 项目规范

## 核心准则
- **样式规范**：仅使用 UnoCSS 工具类，禁止在 `<style>` 标签中写自定义样式
- **API 调用**：统一使用 `useRequest` hook 进行接口调用

## 项目架构
基于 uniapp + Vue3 + TypeScript + Vite5 + UnoCSS 的跨平台开发框架

### 核心配置文件
- [pages.config.ts](mdc:pages.config.ts) → 自动生成 `src/pages.json`
- [manifest.config.ts](mdc:manifest.config.ts) → 自动生成 `src/manifest.json`
- [uno.config.ts](mdc:uno.config.ts) - UnoCSS 配置
- [vite.config.ts](mdc:vite.config.ts) - Vite 构建配置

### 目录结构
- `src/pages/` - 页面组件
- `src/pages-sub/` - 分包页面
- `src/components/` - 可复用组件
- `src/api/` - API 接口定义
- `src/http/` - HTTP 请求封装
- `src/store/` - Pinia 状态管理
- `src/hooks/` - Vue 组合函数

## 开发规范

### Vue 组件
- 使用 `<script setup>` 语法和 Composition API
- SFC 块顺序：`<script>` → `<template>` → `<style>`（通常无需 style）
- 组件文件使用 PascalCase 命名

### TypeScript
- 严格使用 TypeScript，避免 `any` 类型
- 接口定义使用 `interface`，联合类型使用 `type`
- 导入类型使用 `import type` 语法

### 平台适配
使用条件编译处理平台差异：
```vue
// #ifdef H5
// H5 特定代码
// #endif

// #ifdef MP-WEIXIN
// 微信小程序特定代码
// #endif

// #ifdef APP-PLUS
// APP 特定代码
// #endif
```

### API 调用标准模式
```vue
<script setup>
import { getFooAPI, IFooItem } from '@/api/foo'
const { loading, error, data, run } = useRequest<IFooItem>(() => getFooAPI('参数'))
</script>
```

### 组件库
优先使用 wot-design-uni 组件库 和 z-paging